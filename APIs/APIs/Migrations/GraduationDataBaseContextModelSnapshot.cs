// <auto-generated />
using System;
using APIs.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APIs.Migrations
{
    [DbContext(typeof(GraduationDataBaseContext))]
    partial class GraduationDataBaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("APIs.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("APIs.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NameOfPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("APIs.Models.BeautyProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Product_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<decimal>("AvgRating")
                        .HasColumnType("numeric(2, 1)")
                        .HasColumnName("Avg_Rating");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .UseCollation("Arabic_CI_AI");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .UseCollation("Arabic_CI_AI");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .UseCollation("Arabic_CI_AI");

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(20, 2)");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Product_Description")
                        .UseCollation("Arabic_CI_AI");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Product_Name")
                        .UseCollation("Arabic_CI_AI");

                    b.HasKey("ProductId")
                        .HasName("Beauty_Products_pk");

                    b.HasIndex("Email");

                    b.ToTable("Beauty_Products", (string)null);
                });

            modelBuilder.Entity("APIs.Models.BeautyProductsImage", b =>
                {
                    b.Property<int>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("Product_Image_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductImageId"));

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("Product_ID");

                    b.Property<byte[]>("ProductImage")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("ProductImageId")
                        .HasName("Beauty_Products_Image_pk");

                    b.HasIndex("ProductId");

                    b.ToTable("Beauty_Products_Image", (string)null);
                });

            modelBuilder.Entity("APIs.Models.BeautyWishlist", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)");

                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Product_ID");

                    b.Property<string>("Comment")
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)");

                    b.HasKey("Email", "ProductId")
                        .HasName("Beauty_Wishlist_pk");

                    b.HasIndex("ProductId");

                    b.ToTable("Beauty_Wishlist", (string)null);
                });

            modelBuilder.Entity("APIs.Models.BooksProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Product_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<decimal>("AvgRating")
                        .HasColumnType("numeric(2, 1)")
                        .HasColumnName("Avg_Rating");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .UseCollation("Arabic_CI_AI");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .UseCollation("Arabic_CI_AI");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .UseCollation("Arabic_CI_AI");

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(20, 2)");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Product_Description")
                        .UseCollation("Arabic_CI_AI");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Product_Name")
                        .UseCollation("Arabic_CI_AI");

                    b.HasKey("ProductId")
                        .HasName("Books_Prodcuts_pk");

                    b.HasIndex("Email");

                    b.ToTable("Books_Products", (string)null);
                });

            modelBuilder.Entity("APIs.Models.BooksProductsImage", b =>
                {
                    b.Property<int>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("Product_Image_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductImageId"));

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("Product_ID");

                    b.Property<byte[]>("ProductImage")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("ProductImageId")
                        .HasName("Books_Prodcuts_Image_pk");

                    b.HasIndex("ProductId");

                    b.ToTable("Books_Products_Image", (string)null);
                });

            modelBuilder.Entity("APIs.Models.BooksWishlist", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)");

                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Product_ID");

                    b.Property<string>("Comment")
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)");

                    b.HasKey("Email", "ProductId")
                        .HasName("Books_Wishlist_pk");

                    b.HasIndex("ProductId");

                    b.ToTable("Books_Wishlist", (string)null);
                });

            modelBuilder.Entity("APIs.Models.Buyer", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("F_Name");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("L_Name");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.HasKey("Email")
                        .HasName("Buyer_pk");

                    b.ToTable("Buyer", (string)null);
                });

            modelBuilder.Entity("APIs.Models.ElectronicsProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Product_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<decimal>("AvgRating")
                        .HasColumnType("numeric(2, 1)")
                        .HasColumnName("Avg_Rating");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .UseCollation("Arabic_CI_AI");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .UseCollation("Arabic_CI_AI");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .UseCollation("Arabic_CI_AI");

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(20, 2)");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Product_Description")
                        .UseCollation("Arabic_CI_AI");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Product_Name")
                        .UseCollation("Arabic_CI_AI");

                    b.HasKey("ProductId")
                        .HasName("Electronics_Products_pk");

                    b.HasIndex("Email");

                    b.ToTable("Electronics_Products", (string)null);
                });

            modelBuilder.Entity("APIs.Models.ElectronicsProductsImage", b =>
                {
                    b.Property<int>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("Product_Image_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductImageId"));

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("Product_ID");

                    b.Property<byte[]>("ProductImage")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("ProductImageId")
                        .HasName("Electronics_Prodcuts_Image_pk");

                    b.HasIndex("ProductId");

                    b.ToTable("Electronics_Products_Image", (string)null);
                });

            modelBuilder.Entity("APIs.Models.ElectronicsWishlist", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)");

                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Product_ID");

                    b.Property<string>("Comment")
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)");

                    b.HasKey("Email", "ProductId")
                        .HasName("Electronics_Wishlist_pk");

                    b.HasIndex("ProductId");

                    b.ToTable("Electronics_Wishlist", (string)null);
                });

            modelBuilder.Entity("APIs.Models.FashionProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Product_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<decimal>("AvgRating")
                        .HasColumnType("numeric(2, 1)")
                        .HasColumnName("Avg_Rating");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .UseCollation("Arabic_CI_AI");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .UseCollation("Arabic_CI_AI");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .UseCollation("Arabic_CI_AI");

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(20, 2)");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Product_Description")
                        .UseCollation("Arabic_CI_AI");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Product_Name")
                        .UseCollation("Arabic_CI_AI");

                    b.HasKey("ProductId")
                        .HasName("Fashion_Product_pk");

                    b.HasIndex("Email");

                    b.ToTable("Fashion_Product", (string)null);
                });

            modelBuilder.Entity("APIs.Models.FashionProductImage", b =>
                {
                    b.Property<int>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("Product_Image_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductImageId"));

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("Product_ID");

                    b.Property<byte[]>("ProductImage")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("ProductImageId")
                        .HasName("Fashion_Product_Image_pk");

                    b.HasIndex("ProductId");

                    b.ToTable("Fashion_Product_Image", (string)null);
                });

            modelBuilder.Entity("APIs.Models.FashionWishlist", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)");

                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Product_ID");

                    b.Property<string>("Comment")
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)");

                    b.HasKey("Email", "ProductId")
                        .HasName("Fashion_Wishlist_pk");

                    b.HasIndex("ProductId");

                    b.ToTable("Fashion_Wishlist", (string)null);
                });

            modelBuilder.Entity("APIs.Models.GamingProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Product_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<decimal>("AvgRating")
                        .HasColumnType("numeric(2, 1)")
                        .HasColumnName("Avg_Rating");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .UseCollation("Arabic_CI_AI");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .UseCollation("Arabic_CI_AI");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .UseCollation("Arabic_CI_AI");

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(20, 2)");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Product_Description")
                        .UseCollation("Arabic_CI_AI");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Product_Name")
                        .UseCollation("Arabic_CI_AI");

                    b.HasKey("ProductId")
                        .HasName("Gaming_Products_pk");

                    b.HasIndex("Email");

                    b.ToTable("Gaming_Products", (string)null);
                });

            modelBuilder.Entity("APIs.Models.GamingProductsImage", b =>
                {
                    b.Property<int>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("Product_Image_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductImageId"));

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("Product_ID");

                    b.Property<byte[]>("ProductImage")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("ProductImageId")
                        .HasName("Gaming_Products_Image_pk");

                    b.HasIndex("ProductId");

                    b.ToTable("Gaming_Products_Image", (string)null);
                });

            modelBuilder.Entity("APIs.Models.GamingWishlist", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)");

                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Product_ID");

                    b.Property<string>("Comment")
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)");

                    b.HasKey("Email", "ProductId")
                        .HasName("Gaming_Wishlist_pk");

                    b.HasIndex("ProductId");

                    b.ToTable("Gaming_Wishlist", (string)null);
                });

            modelBuilder.Entity("APIs.Models.Seller", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .UseCollation("Arabic_CI_AI");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("F_Name")
                        .UseCollation("Arabic_CI_AI");

                    b.Property<string>("Governate")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .UseCollation("Arabic_CI_AI");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("L_Name")
                        .UseCollation("Arabic_CI_AI");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Long")
                        .HasColumnType("float");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .UseCollation("Arabic_CI_AI");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Shop_Name")
                        .UseCollation("Arabic_CI_AI");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(90)
                        .IsUnicode(false)
                        .HasColumnType("varchar(90)")
                        .UseCollation("Arabic_CI_AI");

                    b.HasKey("Email")
                        .HasName("Seller_pk");

                    b.ToTable("Seller", (string)null);
                });

            modelBuilder.Entity("APIs.Models.SellerPhone", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("Phone_Number");

                    b.HasKey("Email", "PhoneNumber")
                        .HasName("Seller_Phone_pk");

                    b.HasIndex(new[] { "PhoneNumber" }, "Seller_Phone_unique")
                        .IsUnique();

                    b.ToTable("Seller_Phone", (string)null);
                });

            modelBuilder.Entity("APIs.Models.SportsProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Product_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<decimal>("AvgRating")
                        .HasColumnType("numeric(2, 1)")
                        .HasColumnName("Avg_Rating");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .UseCollation("Arabic_CI_AI");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .UseCollation("Arabic_CI_AI");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .UseCollation("Arabic_CI_AI");

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(20, 2)");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Product_Description")
                        .UseCollation("Arabic_CI_AI");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Product_Name")
                        .UseCollation("Arabic_CI_AI");

                    b.HasKey("ProductId")
                        .HasName("Sports_Products_pk");

                    b.HasIndex("Email");

                    b.ToTable("Sports_Products", (string)null);
                });

            modelBuilder.Entity("APIs.Models.SportsProductsImage", b =>
                {
                    b.Property<int>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("Product_Image_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductImageId"));

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("Product_ID");

                    b.Property<byte[]>("ProductImage")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("ProductImageId")
                        .HasName("Sports_Products_Image_pk");

                    b.HasIndex("ProductId");

                    b.ToTable("Sports_Products_Image", (string)null);
                });

            modelBuilder.Entity("APIs.Models.SportsWishlist", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)");

                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Product_ID");

                    b.Property<string>("Comment")
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)");

                    b.HasKey("Email", "ProductId")
                        .HasName("Sports_Wishlist_pk");

                    b.HasIndex("ProductId");

                    b.ToTable("Sports_Wishlist", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("APIs.Models.BeautyProduct", b =>
                {
                    b.HasOne("APIs.Models.Seller", "EmailNavigation")
                        .WithMany("BeautyProducts")
                        .HasForeignKey("Email")
                        .HasConstraintName("Beauty_Products_FK");

                    b.Navigation("EmailNavigation");
                });

            modelBuilder.Entity("APIs.Models.BeautyProductsImage", b =>
                {
                    b.HasOne("APIs.Models.BeautyProduct", "Product")
                        .WithMany("BeautyProductsImages")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("Beauty_Products_Image_FK");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("APIs.Models.BeautyWishlist", b =>
                {
                    b.HasOne("APIs.Models.Buyer", "EmailNavigation")
                        .WithMany("BeautyWishlists")
                        .HasForeignKey("Email")
                        .IsRequired()
                        .HasConstraintName("Beauty_Wishlist_FK_Email");

                    b.HasOne("APIs.Models.BeautyProduct", "Product")
                        .WithMany("BeautyWishlists")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("Beauty_Wishlist_FK_PID");

                    b.Navigation("EmailNavigation");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("APIs.Models.BooksProduct", b =>
                {
                    b.HasOne("APIs.Models.Seller", "EmailNavigation")
                        .WithMany("BooksProducts")
                        .HasForeignKey("Email")
                        .HasConstraintName("Books_Products_FK");

                    b.Navigation("EmailNavigation");
                });

            modelBuilder.Entity("APIs.Models.BooksProductsImage", b =>
                {
                    b.HasOne("APIs.Models.BooksProduct", "Product")
                        .WithMany("BooksProductsImages")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("Books_Products_Image_FK");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("APIs.Models.BooksWishlist", b =>
                {
                    b.HasOne("APIs.Models.Buyer", "EmailNavigation")
                        .WithMany("BooksWishlists")
                        .HasForeignKey("Email")
                        .IsRequired()
                        .HasConstraintName("Books_Wishlist_FK_Email");

                    b.HasOne("APIs.Models.BooksProduct", "Product")
                        .WithMany("BooksWishlists")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("Books_Wishlist_FK_PID");

                    b.Navigation("EmailNavigation");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("APIs.Models.ElectronicsProduct", b =>
                {
                    b.HasOne("APIs.Models.Seller", "EmailNavigation")
                        .WithMany("ElectronicsProducts")
                        .HasForeignKey("Email")
                        .HasConstraintName("Electronics_Products_FK");

                    b.Navigation("EmailNavigation");
                });

            modelBuilder.Entity("APIs.Models.ElectronicsProductsImage", b =>
                {
                    b.HasOne("APIs.Models.ElectronicsProduct", "Product")
                        .WithMany("ElectronicsProductsImages")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("Electronics_Products_Image_FK");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("APIs.Models.ElectronicsWishlist", b =>
                {
                    b.HasOne("APIs.Models.Buyer", "EmailNavigation")
                        .WithMany("ElectronicsWishlists")
                        .HasForeignKey("Email")
                        .IsRequired()
                        .HasConstraintName("Electronics_Wishlist_FK_Email");

                    b.HasOne("APIs.Models.ElectronicsProduct", "Product")
                        .WithMany("ElectronicsWishlists")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("Electronics_Wishlist_FK_PID");

                    b.Navigation("EmailNavigation");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("APIs.Models.FashionProduct", b =>
                {
                    b.HasOne("APIs.Models.Seller", "EmailNavigation")
                        .WithMany("FashionProducts")
                        .HasForeignKey("Email")
                        .HasConstraintName("Fashion_Products_FK");

                    b.Navigation("EmailNavigation");
                });

            modelBuilder.Entity("APIs.Models.FashionProductImage", b =>
                {
                    b.HasOne("APIs.Models.FashionProduct", "Product")
                        .WithMany("FashionProductImages")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("Fashion_Product_Image_FK");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("APIs.Models.FashionWishlist", b =>
                {
                    b.HasOne("APIs.Models.Buyer", "EmailNavigation")
                        .WithMany("FashionWishlists")
                        .HasForeignKey("Email")
                        .IsRequired()
                        .HasConstraintName("Fashion_Wishlist_FK_Email");

                    b.HasOne("APIs.Models.FashionProduct", "Product")
                        .WithMany("FashionWishlists")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("Fashion_Wishlist_FK_PID");

                    b.Navigation("EmailNavigation");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("APIs.Models.GamingProduct", b =>
                {
                    b.HasOne("APIs.Models.Seller", "EmailNavigation")
                        .WithMany("GamingProducts")
                        .HasForeignKey("Email")
                        .HasConstraintName("Gaming_Products_FK");

                    b.Navigation("EmailNavigation");
                });

            modelBuilder.Entity("APIs.Models.GamingProductsImage", b =>
                {
                    b.HasOne("APIs.Models.GamingProduct", "Product")
                        .WithMany("GamingProductsImages")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("Gaming_Products_Image_FK");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("APIs.Models.GamingWishlist", b =>
                {
                    b.HasOne("APIs.Models.Buyer", "EmailNavigation")
                        .WithMany("GamingWishlists")
                        .HasForeignKey("Email")
                        .IsRequired()
                        .HasConstraintName("Gaming_Wishlist_FK_Email");

                    b.HasOne("APIs.Models.GamingProduct", "Product")
                        .WithMany("GamingWishlists")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("Gaming_Wishlist_FK_PID");

                    b.Navigation("EmailNavigation");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("APIs.Models.SellerPhone", b =>
                {
                    b.HasOne("APIs.Models.Seller", "EmailNavigation")
                        .WithMany("SellerPhones")
                        .HasForeignKey("Email")
                        .IsRequired()
                        .HasConstraintName("Seller_Phone_FK");

                    b.Navigation("EmailNavigation");
                });

            modelBuilder.Entity("APIs.Models.SportsProduct", b =>
                {
                    b.HasOne("APIs.Models.Seller", "EmailNavigation")
                        .WithMany("SportsProducts")
                        .HasForeignKey("Email")
                        .HasConstraintName("Sports_Products_FK");

                    b.Navigation("EmailNavigation");
                });

            modelBuilder.Entity("APIs.Models.SportsProductsImage", b =>
                {
                    b.HasOne("APIs.Models.SportsProduct", "Product")
                        .WithMany("SportsProductsImages")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("Sports_Products_Image_FK");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("APIs.Models.SportsWishlist", b =>
                {
                    b.HasOne("APIs.Models.Buyer", "EmailNavigation")
                        .WithMany("SportsWishlists")
                        .HasForeignKey("Email")
                        .IsRequired()
                        .HasConstraintName("Sports_Wishlist_FK_Email");

                    b.HasOne("APIs.Models.SportsProduct", "Product")
                        .WithMany("SportsWishlists")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("Sports_Wishlist_FK_PID");

                    b.Navigation("EmailNavigation");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("APIs.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("APIs.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("APIs.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("APIs.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIs.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("APIs.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("APIs.Models.BeautyProduct", b =>
                {
                    b.Navigation("BeautyProductsImages");

                    b.Navigation("BeautyWishlists");
                });

            modelBuilder.Entity("APIs.Models.BooksProduct", b =>
                {
                    b.Navigation("BooksProductsImages");

                    b.Navigation("BooksWishlists");
                });

            modelBuilder.Entity("APIs.Models.Buyer", b =>
                {
                    b.Navigation("BeautyWishlists");

                    b.Navigation("BooksWishlists");

                    b.Navigation("ElectronicsWishlists");

                    b.Navigation("FashionWishlists");

                    b.Navigation("GamingWishlists");

                    b.Navigation("SportsWishlists");
                });

            modelBuilder.Entity("APIs.Models.ElectronicsProduct", b =>
                {
                    b.Navigation("ElectronicsProductsImages");

                    b.Navigation("ElectronicsWishlists");
                });

            modelBuilder.Entity("APIs.Models.FashionProduct", b =>
                {
                    b.Navigation("FashionProductImages");

                    b.Navigation("FashionWishlists");
                });

            modelBuilder.Entity("APIs.Models.GamingProduct", b =>
                {
                    b.Navigation("GamingProductsImages");

                    b.Navigation("GamingWishlists");
                });

            modelBuilder.Entity("APIs.Models.Seller", b =>
                {
                    b.Navigation("BeautyProducts");

                    b.Navigation("BooksProducts");

                    b.Navigation("ElectronicsProducts");

                    b.Navigation("FashionProducts");

                    b.Navigation("GamingProducts");

                    b.Navigation("SellerPhones");

                    b.Navigation("SportsProducts");
                });

            modelBuilder.Entity("APIs.Models.SportsProduct", b =>
                {
                    b.Navigation("SportsProductsImages");

                    b.Navigation("SportsWishlists");
                });
#pragma warning restore 612, 618
        }
    }
}
